// Functions
// Get raw value
@function get-value($number) {
  @return $number / ($number * 0 + 1);
}

/* Remove the unit of a length
 * @param {Number} $number - Number to remove unit from
 * @return {Number} - Unitless number
 */
@function strip-units($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return get-value($number);
  }

  @return $number;
}

// Convert pixels to rems
// Assumes $browser-context is the font-size of <html>
@function rem($pxval, $base: $browser-context) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  @if not unitless($base) {
    $base: strip-units($base);
  }

  @return ($pxval / $base) * 1rem;
}

// Covert lineheight px to unitless
@function lh($line-height, $font-size) {
  @return get-value($line-height / $font-size);
}

// Ascending
// Evaluates maps like our grid breakpoints.
@mixin declare-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == '%' or unit($prev-num) == '%' {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin declare-starts-at-zero($map, $map-name: '$grid-breakpoints') {
  @if length($map) > 0 {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value != 0 {
      @warn 'First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.';
    }
  }
}

// Variables
$var-prefix: fxm- !default;

// Font Families
$font-primary: 'Open Sans', sans-serif;
$font-secondary: 'Lato', sans-serif;
$font-label: 'Roboto', sans-serif;
$font-misc: 'Poppins', sans-serif;
$font-cursive: 'Sacramento', cursive;

// Font Weights
$light-weight: 300;
$normal-weight: 400;
$medium-weight: 500;
$bold-weight: 700;

// Browser Context Sizing for consistent unit/measurement
$browser-context: 10px !default;
$base-line-height: 1.5 !default;
$base-letter-spacing: 0 !default;

// Spacing
$spacer: rem(10) !default;
$spacers: (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
) !default;
// $negative-spacers: if($enable-negative-margins, negativify-map($spacers), null) !default;

// Grid breakpoints
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1420px
) !default;

@include declare-ascending($grid-breakpoints, '$grid-breakpoints');
@include declare-starts-at-zero($grid-breakpoints, '$grid-breakpoints');

// Define the maximum width of `.container` for different screen sizes.
$container-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
) !default;

@include declare-ascending($container-widths, '$container-widths');

// Make gridpoints available from single var
// @see https://sass-lang.com/documentation/variables#advanced-variable-functions
$sm: map-get($grid-breakpoints, sm) !default;
$md: map-get($grid-breakpoints, md) !default;
$lg: map-get($grid-breakpoints, lg) !default;
$xl: map-get($grid-breakpoints, xl) !default;
$xxl: map-get($grid-breakpoints, xxl) !default;

// Grid columns and width of the gutters
$grid-columns:                12 !default;
$grid-gutter-width:           1.5rem !default;
$grid-row-columns:            6 !default;
$gutters: $spacers !default;

// Container padding
$container-padding-x: $grid-gutter-width * 0.5 !default;

// Paddings
$padding-side-mobile: 2rem !default;
$padding-side-tablet: 3rem !default;
$padding-side-desktop: 4rem !default;

// Defined text width for readibility
$max-width-block-text: 668px !default;

// Navigation Heights
$adminbar-height-mobile: 46px;
$adminbar-height-desktop: 32px;
$toolbar-height: 35px;
$nav-height-mobile: 80px;
$nav-height-desktop: 110px;
$nav-height-scrolled: 60px;
$top-banner-height: 80px;
$bottom-banner-height: 60px;

// Miscellaneous measurements
$circle-button-scale: 1.08;

// Z-Indexes
// Z-Indexes
$z-layers: (
  'notice-bars': 9999,
  'navigation': 9998,
  'search-nav': 9997,
  'hamburger': 9996,
  'overlay': 9995,
  'footer': 9994,
  'slider-nav': 9993
);

// @see https://github.com/twbs/bootstrap/blob/452e2f068941a1fecb84e081660765d90c167249/scss/_variables.scss#L81
$white: #fff;
$warm-white: #f7f7f7 !default;
$lightest-grey: #cfcfcf !default;
$light-grey: #b1b1b1 !default;
$dark-grey: #3f3f3f !default;
$warm-black: #272727 !default;
$label-grey: #020202 !default;
$black: #000;
$color-light-border: #e4e9ed !default;

// Theme Colors
$blue: #05386b !default;
$sky-blue: #48b5d6 !default;
$light-blue: #0077c8 !default;
$mid-blue: #054880 !default;
$dark-blue: #070a17 !default;
$red: #9e3226 !default;
$light-red: #e82535 !default;
$dark-red: #c92830 !default;
$orange: #ee792b !default;
$dark-orange: #ff652f !default;
$yellow: #ffe400 !default;
$dark-yellow: #fbcf4e !default;
$green: #14a76c !default;
$light-green: #12b35f !default;
$dark-green: #108a4b !default;
$teal: #00465f !default;
$light-teal: #074f67 !default;
$dark-teal: #143548 !default;

// @todo Theme Colors array (& color vars above) need better naming and conventions
// $main

// We use this to generate color helper classes in 'themes/_color-classes'
$theme-colors: (
  white: $white,
  warm-white: $warm-white,
  blue: $blue,
  sky-blye: $sky-blue,
  light-blue: $light-blue,
  mid-blue: $mid-blue,
  dark-blue: $dark-blue,
  red: $red,
  light-red: $light-red,
  dark-red: $dark-red,
  orange: $orange,
  light-orange: lighten($orange, 10),
  dark-orange: $dark-orange,
  yellow: $yellow,
  light-yellow: lighten($yellow, 10),
  dark-yellow: $dark-yellow,
  green: $green,
  light-green: lighten($green, 10),
  dark-green: $dark-green,
  teal: $teal,
  light-teal: $light-teal,
  dark-teal: $dark-teal,
  lightest-grey: $lightest-grey,
  light-grey: $light-grey,
  dark-grey: $dark-grey,
  label-grey: $label-grey,
  black: $black,
) !default;

// Brand Colors A&P for now here
$brand-red: #f04624; // f51212
$brand-blue: #39aa9b;
$brand-green: #7ecb2a;
$brand-purple: #5d2790;
$brand-yellow: #f8a62c;

$main-color: var(--#{$var-prefix}main-color, $brand-red);
// $second
// $third
// $fourth
// $success
// $error
// $alert
// $warning
// $info
// light
// dark

$site-colors: (
  main: $main-color,
);

// Gradients
$grad-text: rgba(93, 39, 144, 1) 0%, rgba(9, 70, 121, 1) 40%, rgba(23, 98, 128, 1) 70%, rgba(57, 170, 155, 1) 100%;
$grad-alt: rgba(57, 170, 155, 1) 0, rgba(126, 203, 42, 1) 33%, rgba(248, 166, 44, 1) 66%, rgba(240, 70, 36, 1) 100%;

// Mixins
// Focus Mixin
@mixin focus($color: $white, $offset: 2px, $contrast: 'none') {
  // focus states for desktop
  &:focus {
    outline: 1px dotted $color;
    outline-offset: $offset;
  }
}

// Font Face
@mixin font-face($font-folder, $font-family, $file-name, $font-weight: 400, $font-style: normal) {
  $fonts-path: '/src/fonts/'+ $font-folder;

  @font-face {
    font-family: '#{$font-family}';
    font-weight: $font-weight;
    font-style: $font-style;
    src: url('#{$fonts-path}/#{$file-name}.woff2') format('woff2'), url('#{$fonts-path}/#{$file-name}.woff') format('woff');
  }
}

// Positioning Mixin
@mixin absolute ($top: 0, $left: 0, $width: auto, $height: auto) {
  position: absolute;
  top: $top;
  left: $left;
  width: $width;
  height: $height;
}

@mixin translate ($translateX: 0, $translateY: 0) {
  transform: translate($translateX, $translateY);
}

// object-fit for images
// @param $object-fit (optional): can be cover or contain
@mixin object-fit(
  $top: 0,
  $left: 0,
  $width: 100%,
  $height: 100%,
  $object-fit: cover
) {
  @include absolute($top, $left, $width, $height);
  object-fit: $object-fit;
}

// Generate List for color gradients
@mixin color-list() {
  // rgba($warm-white, 1)
}

// Generates a Background Gradient
// @param direction - left || top || bottom || right
// @param list - A list of colors and optional percentages
// List Example: list1: $blue, $green, $orange;
// List Example2: list2: $blue 0%,$blue 33%,$green 33%,$green 66%, $orange 66%, $orange 100%;
@mixin bg-gradient($direction, $list) {
  background: linear-gradient(unquote($direction), $list);
}

@mixin txt-gradient($color: $brand-purple, $grad: $grad-text, $direction: '90deg') {
  color: $color;
  @include bg-gradient($direction, $grad);
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

// font smoothing
@mixin smoothing {
  font-feature-settings: 'liga'1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Truncate lines and use ellipsis
@mixin truncate-lines($n: 4) {
  overflow: hidden;
  text-overflow: ellipsis;

  /* stylelint-disable value-no-vendor-prefix, property-no-unknown */
  display: -webkit-box;
  -webkit-line-clamp: #{$n};
  box-orient: vertical;
  -webkit-box-orient: vertical;

  /* xstylelint-enable value-no-vendor-prefix, property-no-unknown */
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - 0.02, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - 0.02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ''  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    '-sm'
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// @deprecated Leaving for backwards compat for now
// @todo make the new one based on new workflow call
// @todo keep the same naming for easier compat
@mixin break-min($media) {
  @if (type-of($media)=='number') {
    @if (unit($media)=='px' or unit($media)=='em') {
      @media screen and (min-width: #{$media}) {
        @content;
      }
    }

    @else {
      @media screen and (min-width: #{$media}em) {
        @content;
      }
    }
  }

  @else {
    @media screen and (#{$media}) {
      @content;
    }
  }
}

// @deprecated Leaving for backwards compat for now
// @todo make the new one based on new workflow call
// @todo keep the same naming for easier compat
@mixin break-max($media) {
  @if (type-of($media)=='number') {
    @if (unit($media)=='px' or unit($media)=='em') {

      // -1 px
      @media screen and (max-width: #{$media - 0.063}) {
        @content;
      }
    }

    @else {

      // -1 px
      @media screen and (max-width: #{$media - 0.063}em) {
        @content;
      }
    }
  }

  @else {
    @media screen and (#{$media}) {
      @content;
    }
  }
}

// @todo add a possible custom value parameter not pre-set from the variable
@mixin side-padding($gutter: $container-padding-x) {
  padding-right: var(--#{$var-prefix}gutter-x, #{$gutter});
  padding-left: var(--#{$var-prefix}gutter-x, #{$gutter});
}

// Container mixins
@mixin container($size: xl) {
  @include side-padding();
  width: 100%;
  margin-right: auto;
  margin-left: auto;
}

// Grid system
// Generate semantic grid columns with these mixins.
// Based from Bootstrap Grid System

@mixin row($gutter: $grid-gutter-width) {
  --#{$var-prefix}gutter-x: #{$gutter};
  --#{$var-prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  // margin-top: calc(var(--#{$var-prefix}gutter-y) * -1);
  // margin-right: calc(var(--#{$var-prefix}gutter-x) * -0.5);
  // margin-left: calc(var(--#{$var-prefix}gutter-x) * -0.5);
  margin-top: calc(var(--#{$var-prefix}gutter-y) * -1);
  margin-right: calc(var(--#{$var-prefix}gutter-x) / -2);
  margin-left: calc(var(--#{$var-prefix}gutter-x) / -2);
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
  // Add box sizing if only the grid is loaded
  // box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(var(--#{$var-prefix}gutter-x) / 2); // * 0.5
  padding-left: calc(var(--#{$var-prefix}gutter-x) / 2);
  margin-top: var(--#{$var-prefix}gutter-y);
}

@mixin col($size: false, $columns: $grid-columns) {
  @if $size {
    flex: 0 0 auto;
    // width: percentage(divide($size, $columns));
    // $num: div($size, $columns);
    // @debug $num;
    width: percentage($size / $columns);
  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  @if $size {
    margin-left: percentage($size / $columns);
  } @else {
    margin-left: 0;
  }
  // $num: divide($size, $columns);
  // margin-left: if($num == 0, 0, percentage($num));
  // margin-left: if($num == 0, 0, percentage($size / $columns));
}

@mixin row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: divide(100%, $count);
  }
}

// @todo determine if we need this other mixin from BS
// @see https://github.com/twbs/bootstrap/blob/452e2f068941a1fecb84e081660765d90c167249/scss/mixins/_grid.scss#L62
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{$infix}-auto > * {
        @include make-col-auto();
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include col($i, $columns);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == '' and $i == 0) { // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @each $key, $value in $gutters {
        .g#{$infix}-#{$key},
        .gx#{$infix}-#{$key} {
          --#{$var-prefix}gutter-x: #{$value};
        }

        .g#{$infix}-#{$key},
        .gy#{$infix}-#{$key} {
          --#{$var-prefix}gutter-y: #{$value};
        }
      }
    }
  }
}

@mixin grid() {
  // @deprecated
}

// @for $width from 1 through $columns {
// 	.col-#{$width} {
// 		flex-basis: $width / $columns * 100%;
// 	}
// }

// Positioning
// TODO: Deprecate
@mixin flex-children ($align: flex-start, $justify: flex-start, $height: 100%) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
  height: $height;
}

@mixin center-children {
  @include flex-children(center, center);
}

// Z-Indexes mixins
@function z($layer) {
  @if not map-has-key($z-layers, $layer) {
    @warn 'No layer found for `#{$layer}` in $z-layers map. Property omitted.';
  }
  @return map-get($z-layers, $layer);
}

// Display
@mixin visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute !important;
  width: 1px;
}

@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: '';
  }
}

/**
 * Global normalize/reset styles
 * Inspiired by: https://github.com/sindresorhus/modern-normalize
 */

/*
Use a better box model
*/

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/*
1. Set global base font style
2. Prevent adjustments of font size after orientation changes in iOS
3. Set global background color
*/

html,
body {
  @include smoothing(); /* 1 */
  font-family: $font-primary, sans-serif; /* 1 */
  font-size: $browser-context; /* 1 */
  line-height: $base-line-height; /* 1 */
  letter-spacing: $base-letter-spacing; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
  background-color: $warm-white; /* 3 */
}

/*
Global responsive image base style
*/

img {
  width: auto;
  max-width: 100%;
  height: auto;
  display: block;
  transition: all 0.2s linear;
}

/**
Do not use default list style for lists (dots)
*/

ol,
ul {
  list-style: none;
}

/**
Very lightweight table reset
Inspired by: https://css-tricks.com/should-you-have-defaults-styles-for-table/#are-light-default-styles-a-possibility
*/

table {
  border-collapse: collapse;
  border-spacing: 0;
}

tr {
  border-bottom: 1px solid #ccc;
}

th,
td {
  text-align: left;
  padding: 4px;
}

/**
1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
2. Correct the odd 'em' font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/**
Prevent 'sub' and 'sup' elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
Forms
=====
*/

button {
  border: none;
}

/**
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
  padding: 0;
}

/**
Remove the inheritance of text transform in Edge and Firefox.
1. Remove the inheritance of text transform in Firefox.
*/

button,
select {
  text-transform: none;
}

/**
Correct the inability to style clickable types in iOS and Safari.
*/

button,
[type='button'],
[type='reset'],
[type='submit'] {
  -webkit-appearance: button;
}

/**
Remove the inner border and padding in Firefox.
*/

button::-moz-focus-inner,
[type='button']::-moz-focus-inner,
[type='reset']::-moz-focus-inner,
[type='submit']::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
Restore the focus styles unset by the previous rule.
*/

button:-moz-focusring,
[type='button']:-moz-focusring,
[type='reset']:-moz-focusring,
[type='submit']:-moz-focusring {
  outline: 1px dotted $black;
}

/**
Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.
*/

legend {
  padding: 0;
}

/**
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/**
Correct the cursor style of increment and decrement buttons in Safari.
*/

[type='number']::-webkit-inner-spin-button,
[type='number']::-webkit-outer-spin-button {
  height: auto;
}

/**
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
Remove the inner padding in Chrome and Safari on macOS.
*/

[type='search']::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to 'inherit' in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/**
Add the correct height in Firefox.
*/

hr {
  height: 0;
}

/*
Interactive
===========
*/

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/**
* Custom Normalizations
*/

a,
button,
select,
input,
textarea {
  text-decoration: none;
  background-color: transparent;
  border: 0;
}

/* clears the ‘X’ from Internet Explorer */
[type='search']::-ms-clear {
  display: none;
  width: 0;
  height: 0;
}

[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

/* clears the ‘X’ from Chrome */
[type='search']::-webkit-search-decoration,
[type='search']::-webkit-search-cancel-button,
[type='search']::-webkit-search-results-button,
[type='search']::-webkit-search-results-decoration {
  display: none;
}

// Globally include @font-face for all fonts used
// @see wp-content/themes/freshxmind/src/css/abstracts/mixins/_font-face.scss
// @see Make sure to match them with your variables in variables.scss
// @include font-face(folder, family, file, weight, style);
// .grad-text {

// }

.heading {
  color: $black;
  line-height: 1;
  font-family: $font-secondary;
  font-weight: $bold-weight;

  // Gradient Background Titles
  &--gradient {
    @include txt-gradient();
  }

  &--gradient-alt {
    @include txt-gradient($brand-green, $grad-alt);
  }

  &--2xl {
    font-size: rem(42);

    @include break-min($md) {
      font-size: rem(100);
    }
  }

  &--xl {
    font-size: rem(32);
    line-height: 1.11;

    @include break-min($md) {
      font-size: rem(38);
      line-height: 1.11;
    }

    @include break-min($lg) {
      font-size: rem(44);
      line-height: 1.14;
    }

    @include break-min($xl) {
      font-size: rem(48);
      line-height: 1.25;
    }
  }

  &--lg {
    font-size: rem(28);
    line-height: 1.14;

    @include break-min($md) {
      font-size: rem(48);
      line-height: 1.17;
    }
  }

  &--md {
    font-size: rem(24);
    line-height: 1.17;

    @include break-min($md) {
      font-size: rem(34);
      line-height: 1.18;
    }
  }

  &--sm {
    font-size: rem(18);
    line-height: 1.25;

    @include break-min($md) {
      font-size: rem(24);
    }
  }

  &--xs {
    font-size: rem(16);
    line-height: 1.29;
    // font-weight: $medium-weight;

    @include break-min($md) {
      font-size: rem(20);
      line-height: 1.25;
    }
  }

  &--2xs {
    font-size: rem(14);
    line-height: 1.2;

    @include break-min($md) {
      font-size: rem(16);
      line-height: 1.4;
    }
  }
}

.text {
  font-family: $font-primary;
  color: $black;
  font-size: rem(16);
  line-height: 1.5;
  font-weight: 400;
  font-stretch: normal;
  font-style: normal;

  &--xl {
    font-size: rem(18);
    line-height: 1.6;

    @include break-min($lg) {
      font-size: rem(20);
    }
  }

  &--lg {
    font-size: rem(16);
    line-height: 1.5;

    @include break-min($lg) {
      font-size: rem(18);
    }
  }

  &--md {
    font-size: rem(16);
    line-height: 1.43;
  }

  &--sm {
    font-size: rem(12);
    line-height: 1.2;
  }
}

strong,
b {
  font-weight: $bold-weight;
}

.label {
  font-family: $font-label;
  color: $label-grey;
  letter-spacing: 0.5px;
  display: block;
  text-transform: uppercase;

  &--xl {
    font-size: rem(20);
    line-height: 1.25;
    font-weight: 700;

    @include break-min($md) {
      font-size: rem(24);
      line-height: 1.4;
    }
  }

  &--lg {
    font-size: rem(18);
    line-height: 1.25;

    @include break-min($md) {
      font-size: rem(22);
      line-height: 1.2;
    }
  }

  &--md {
    font-size: rem(16);
    line-height: 1.25;

    @include break-min($md) {
      font-size: rem(18);
      line-height: 1.2;
    }
  }

  &--sm {
    font-size: rem(14);
    line-height: 1.3;

    @include break-min($md) {
      font-size: rem(16);
      line-height: 1.25;
    }
  }

  &--xs {
    font-size: rem(12);
    line-height: 1.3;
    text-transform: none;

    @include break-min($md) {
      font-size: rem(14);
      line-height: 1.25;
    }
  }
}

.link {
  font-family: $font-misc;
  color: $mid-blue;
  font-size: rem(16);
  line-height: 1.5;
  font-weight: 400;
  font-stretch: normal;
  font-style: normal;

  &--xl {
    font-size: rem(18);
    line-height: 1.6;

    @include break-min($lg) {
      font-size: rem(20);
    }
  }

  &--lg {
    font-size: rem(16);
    line-height: 1.5;

    @include break-min($lg) {
      font-size: rem(18);
    }
  }

  &--md {
    font-size: rem(14);
    line-height: 1.43;
  }

  &--sm {
    font-size: rem(12);
    line-height: 1.2;
  }
}

.cursive {
  font-family: $font-cursive;
  color: $black;
  font-size: rem(22);
  line-height: 1.5;
  font-weight: 400;
  font-stretch: normal;
  font-style: normal;

  &--xl {
    font-size: rem(48);
    line-height: 1.6;

    @include break-min($lg) {
      font-size: rem(56);
    }
  }

  &--lg {
    font-size: rem(38);
    line-height: 1.5;

    @include break-min($lg) {
      font-size: rem(46);
    }
  }

  &--md {
    font-size: rem(30);
    line-height: 1.43;
  }

  &--sm {
    font-size: rem(14);
    line-height: 1.2;
  }
}

// Single container class with breakpoint max-widths
.container,
// 100% wide container at all breakpoints
.container-full {
  @include container();
}

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $container-width in $container-widths {
  .container-#{$breakpoint} {
    @extend .container-full;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    %responsive-container-#{$breakpoint} {
      max-width: $container-width;
    }

    // Extend each breakpoint which is smaller or equal to the current breakpoint
    $extend-breakpoint: true;

    @each $name, $width in $grid-breakpoints {
      @if ($extend-breakpoint) {
        .container#{breakpoint-infix($name, $grid-breakpoints)} {
          @extend %responsive-container-#{$breakpoint};
        }

        // Once the current breakpoint is reached, stop extending
        @if ($breakpoint == $name) {
          $extend-breakpoint: false;
        }
      }
    }
  }
}

// Row classes
.row {
  @include row();

  > * {
    @include make-col-ready();
  }
}

// Make Columns
@include make-grid-columns();

.clearfix {
  @include clearfix();
}

// Font
.font {
  &-bold {
    font-weight: $bold-weight !important;
  }

  &-medium {
    font-weight: $medium-weight !important;
  }

  &-italic {
    font-style: italic !important;
  }
}

.transform {
  &-up {
    text-transform: uppercase !important;
  }

  &-cap {
    text-transform: capitalize !important;
  }

  &-low {
    text-transform: lowercase !important;
  }
}

// Text align
.align {
  &-center {
    text-align: center !important;
  }

  &-left {
    text-align: left !important;
  }

  &-right {
    text-align: right !important;
  }

  &-justify {
    text-align: justify !important;
  }
}

// Display Utilities
.d {
  &-inline-block {
    display: inline-block;
  }

  &-block {
    display: block !important;
  }
}

// Justify content flex box
.justify {
  &--center {
    justify-content: center !important;
  }

  &--space-between {
    justify-content: space-between !important;
  }

  &--start {
    justify-content: flex-start !important;
  }

  &--end {
    justify-content: flex-end !important;
  }
}

.sr-only,
.screen-reader-text,
.hidden {
  @include visually-hidden;
}

.no-scroll {
  overflow: hidden !important;

  &--overlay {
    overflow: hidden !important;

    &::before {
      content: '';
      background: $white;
      bottom: 0;
      left: 0;
      position: absolute;
      right: 0;
      top: 0;
      z-index: 9999;
    }
  }

  &-force {
    position: fixed;
    height: 100%;
    overflow-y: none !important;
    overflow: hidden !important;

    body {
      height: 100%;
      overflow-y: none !important;
      overflow: hidden !important;
    }
  }
}

.mobile-only {
  display: inline-block;

  @include break-min($md) {
    display: none !important;
  }
}

.tablet-up {
  display: inline-block;

  @include break-max($md) {
    display: none !important;
  }
}

.desktop-only {
  display: inline-block;

  @include break-max($lg) {
    display: none !important;
  }
}

// .grid-wrapper {
//   @include grid(4);

//   &--tidy {
//     @include grid(3);
//   }
// }

h1,
h2,
h3,
h4,
h5,
h6 {
  @extend .heading;
}

a,
p,
li,
span {
  @extend .text;
}

label {
  @extend .label;
}

a {
  color: $mid-blue;
  transition: all 0.2s ease-in-out;

  &:hover {
    color: $light-blue;
  }
}

a,
button,
.button {
  cursor: pointer;
}
